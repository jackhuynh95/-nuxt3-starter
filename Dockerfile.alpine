# Set the Node.js version to be used; default is 20
ARG NODE_VERSION=20

# Start the build stage using the specified Node.js version on Alpine Linux
FROM node:${NODE_VERSION}-alpine as build-stage

# Set the working directory inside the container
WORKDIR /app

# Enable Corepack to manage package managers (like pnpm)
RUN corepack enable

# Copy the necessary files for the dependency installation
COPY .npmrc package.json pnpm-lock.yaml ./

# Install dependencies using pnpm, utilizing a cache for faster builds
RUN --mount=type=cache,id=pnpm-store,target=/root/.pnpm-store \
    pnpm install --frozen-lockfile

# Copy the rest of the application code into the container
COPY . .

# Copy .env.production and rename it to .env
COPY .env.production .env

# Build the Nuxt.js application
RUN pnpm build

# Start the production stage using the same Node.js version
FROM node:${NODE_VERSION}-alpine as production-stage

# Set the working directory inside the production container
WORKDIR /app

# Copy the built output from the build stage
COPY --from=build-stage /app/.output ./.output

# Using port 80 to allow access to the application
# Set environment variables
ENV NODE_ENV=production
ENV NUXT_PORT=80
ENV NITRO_PORT=80
ENV NITRO_HOST=0.0.0.0
ENV NUXT_HOST=0.0.0.0
# ENV HOST=0.0.0.0

# Expose this port
EXPOSE 80

# Define the command to run the application
CMD ["node", ".output/server/index.mjs"]